package com.kamikaze.docidset.compression;
 
/**
 * Implementation of the hard-coded decompression of the 256 b-bit slots in PForDelta 
 * 
 * In order to use other values of blockSize instead of 256, we need to call com.kamikaze.docidset.utils.generatePForDeltaUnpackClass.GenerateUnpackClass(BLOCKSIZE, "PForDeltaUnpack.java")
 * to generate this file with the PForDeltaUnpack class where the blockSize==BLOCKSIZE.
 * 
 * @author hao yan
 */

public class PForDeltaUnpack{
  // providing hardcoded unpack functions for different values of b within {1,2,3,4,5,6,7,8,9,10,11,12,13,16,20};
  static public void unpack(int[] out, int[] in, int bits) {
    switch (bits) {
      case 1:  unpack1(out, in); break;
      case 2:  unpack2(out, in); break;
      case 3:  unpack3(out, in); break;
      case 4:  unpack4(out, in); break;
      case 5:  unpack5(out, in); break;
      case 6:  unpack6(out, in); break;
      case 7:  unpack7(out, in); break;
      case 8:  unpack8(out, in); break;
      case 9:  unpack9(out, in); break;
      case 10:  unpack10(out, in); break;
      case 11:  unpack11(out, in); break;
      case 12:  unpack12(out, in); break;
      case 13:  unpack13(out, in); break;
      case 16:  unpack16(out, in); break;
      case 20:  unpack20(out, in); break;
      default: break;
    }
  }
 
  static private void unpack1(int[] out, int[] in)
  {
  int i, w;
  for(i=0, w=2; i<8; ++i, w+=1){
    out[0+(i<<5)] = ((in[w+0]) & 1);
    out[1+(i<<5)] = ((in[w+0] >>> 1) & 1);
    out[2+(i<<5)] = ((in[w+0] >>> 2) & 1);
    out[3+(i<<5)] = ((in[w+0] >>> 3) & 1);
    out[4+(i<<5)] = ((in[w+0] >>> 4) & 1);
    out[5+(i<<5)] = ((in[w+0] >>> 5) & 1);
    out[6+(i<<5)] = ((in[w+0] >>> 6) & 1);
    out[7+(i<<5)] = ((in[w+0] >>> 7) & 1);
    out[8+(i<<5)] = ((in[w+0] >>> 8) & 1);
    out[9+(i<<5)] = ((in[w+0] >>> 9) & 1);
    out[10+(i<<5)] = ((in[w+0] >>> 10) & 1);
    out[11+(i<<5)] = ((in[w+0] >>> 11) & 1);
    out[12+(i<<5)] = ((in[w+0] >>> 12) & 1);
    out[13+(i<<5)] = ((in[w+0] >>> 13) & 1);
    out[14+(i<<5)] = ((in[w+0] >>> 14) & 1);
    out[15+(i<<5)] = ((in[w+0] >>> 15) & 1);
    out[16+(i<<5)] = ((in[w+0] >>> 16) & 1);
    out[17+(i<<5)] = ((in[w+0] >>> 17) & 1);
    out[18+(i<<5)] = ((in[w+0] >>> 18) & 1);
    out[19+(i<<5)] = ((in[w+0] >>> 19) & 1);
    out[20+(i<<5)] = ((in[w+0] >>> 20) & 1);
    out[21+(i<<5)] = ((in[w+0] >>> 21) & 1);
    out[22+(i<<5)] = ((in[w+0] >>> 22) & 1);
    out[23+(i<<5)] = ((in[w+0] >>> 23) & 1);
    out[24+(i<<5)] = ((in[w+0] >>> 24) & 1);
    out[25+(i<<5)] = ((in[w+0] >>> 25) & 1);
    out[26+(i<<5)] = ((in[w+0] >>> 26) & 1);
    out[27+(i<<5)] = ((in[w+0] >>> 27) & 1);
    out[28+(i<<5)] = ((in[w+0] >>> 28) & 1);
    out[29+(i<<5)] = ((in[w+0] >>> 29) & 1);
    out[30+(i<<5)] = ((in[w+0] >>> 30) & 1);
    out[31+(i<<5)] = ((in[w+0] >>> 31) & 1);
  }
  }
 
  static private void unpack2(int[] out, int[] in)
  {
  int i, w;
  for(i=0, w=2; i<8; ++i, w+=2){
    out[0+(i<<5)] = ((in[w+0]) & 3);
    out[1+(i<<5)] = ((in[w+0] >>> 2) & 3);
    out[2+(i<<5)] = ((in[w+0] >>> 4) & 3);
    out[3+(i<<5)] = ((in[w+0] >>> 6) & 3);
    out[4+(i<<5)] = ((in[w+0] >>> 8) & 3);
    out[5+(i<<5)] = ((in[w+0] >>> 10) & 3);
    out[6+(i<<5)] = ((in[w+0] >>> 12) & 3);
    out[7+(i<<5)] = ((in[w+0] >>> 14) & 3);
    out[8+(i<<5)] = ((in[w+0] >>> 16) & 3);
    out[9+(i<<5)] = ((in[w+0] >>> 18) & 3);
    out[10+(i<<5)] = ((in[w+0] >>> 20) & 3);
    out[11+(i<<5)] = ((in[w+0] >>> 22) & 3);
    out[12+(i<<5)] = ((in[w+0] >>> 24) & 3);
    out[13+(i<<5)] = ((in[w+0] >>> 26) & 3);
    out[14+(i<<5)] = ((in[w+0] >>> 28) & 3);
    out[15+(i<<5)] = ((in[w+0] >>> 30) & 3);
    out[16+(i<<5)] = ((in[w+1]) & 3);
    out[17+(i<<5)] = ((in[w+1] >>> 2) & 3);
    out[18+(i<<5)] = ((in[w+1] >>> 4) & 3);
    out[19+(i<<5)] = ((in[w+1] >>> 6) & 3);
    out[20+(i<<5)] = ((in[w+1] >>> 8) & 3);
    out[21+(i<<5)] = ((in[w+1] >>> 10) & 3);
    out[22+(i<<5)] = ((in[w+1] >>> 12) & 3);
    out[23+(i<<5)] = ((in[w+1] >>> 14) & 3);
    out[24+(i<<5)] = ((in[w+1] >>> 16) & 3);
    out[25+(i<<5)] = ((in[w+1] >>> 18) & 3);
    out[26+(i<<5)] = ((in[w+1] >>> 20) & 3);
    out[27+(i<<5)] = ((in[w+1] >>> 22) & 3);
    out[28+(i<<5)] = ((in[w+1] >>> 24) & 3);
    out[29+(i<<5)] = ((in[w+1] >>> 26) & 3);
    out[30+(i<<5)] = ((in[w+1] >>> 28) & 3);
    out[31+(i<<5)] = ((in[w+1] >>> 30) & 3);
  }
  }
 
  static private void unpack3(int[] out, int[] in)
  {
  int i, w;
  for(i=0, w=2; i<8; ++i, w+=3){
    out[0+(i<<5)] = ((in[w+0]) & 7);
    out[1+(i<<5)] = ((in[w+0] >>> 3) & 7);
    out[2+(i<<5)] = ((in[w+0] >>> 6) & 7);
    out[3+(i<<5)] = ((in[w+0] >>> 9) & 7);
    out[4+(i<<5)] = ((in[w+0] >>> 12) & 7);
    out[5+(i<<5)] = ((in[w+0] >>> 15) & 7);
    out[6+(i<<5)] = ((in[w+0] >>> 18) & 7);
    out[7+(i<<5)] = ((in[w+0] >>> 21) & 7);
    out[8+(i<<5)] = ((in[w+0] >>> 24) & 7);
    out[9+(i<<5)] = ((in[w+0] >>> 27) & 7);
    out[10+(i<<5)] = ((in[w+0] >>> 30) & 7);
    out[10+(i<<5)] |= ((in[w+1] << 2) & 7);
    out[11+(i<<5)] = ((in[w+1] >>> 1) & 7);
    out[12+(i<<5)] = ((in[w+1] >>> 4) & 7);
    out[13+(i<<5)] = ((in[w+1] >>> 7) & 7);
    out[14+(i<<5)] = ((in[w+1] >>> 10) & 7);
    out[15+(i<<5)] = ((in[w+1] >>> 13) & 7);
    out[16+(i<<5)] = ((in[w+1] >>> 16) & 7);
    out[17+(i<<5)] = ((in[w+1] >>> 19) & 7);
    out[18+(i<<5)] = ((in[w+1] >>> 22) & 7);
    out[19+(i<<5)] = ((in[w+1] >>> 25) & 7);
    out[20+(i<<5)] = ((in[w+1] >>> 28) & 7);
    out[21+(i<<5)] = ((in[w+1] >>> 31) & 7);
    out[21+(i<<5)] |= ((in[w+2] << 1) & 7);
    out[22+(i<<5)] = ((in[w+2] >>> 2) & 7);
    out[23+(i<<5)] = ((in[w+2] >>> 5) & 7);
    out[24+(i<<5)] = ((in[w+2] >>> 8) & 7);
    out[25+(i<<5)] = ((in[w+2] >>> 11) & 7);
    out[26+(i<<5)] = ((in[w+2] >>> 14) & 7);
    out[27+(i<<5)] = ((in[w+2] >>> 17) & 7);
    out[28+(i<<5)] = ((in[w+2] >>> 20) & 7);
    out[29+(i<<5)] = ((in[w+2] >>> 23) & 7);
    out[30+(i<<5)] = ((in[w+2] >>> 26) & 7);
    out[31+(i<<5)] = ((in[w+2] >>> 29) & 7);
  }
  }
 
  static private void unpack4(int[] out, int[] in)
  {
  int i, w;
  for(i=0, w=2; i<8; ++i, w+=4){
    out[0+(i<<5)] = ((in[w+0]) & 15);
    out[1+(i<<5)] = ((in[w+0] >>> 4) & 15);
    out[2+(i<<5)] = ((in[w+0] >>> 8) & 15);
    out[3+(i<<5)] = ((in[w+0] >>> 12) & 15);
    out[4+(i<<5)] = ((in[w+0] >>> 16) & 15);
    out[5+(i<<5)] = ((in[w+0] >>> 20) & 15);
    out[6+(i<<5)] = ((in[w+0] >>> 24) & 15);
    out[7+(i<<5)] = ((in[w+0] >>> 28) & 15);
    out[8+(i<<5)] = ((in[w+1]) & 15);
    out[9+(i<<5)] = ((in[w+1] >>> 4) & 15);
    out[10+(i<<5)] = ((in[w+1] >>> 8) & 15);
    out[11+(i<<5)] = ((in[w+1] >>> 12) & 15);
    out[12+(i<<5)] = ((in[w+1] >>> 16) & 15);
    out[13+(i<<5)] = ((in[w+1] >>> 20) & 15);
    out[14+(i<<5)] = ((in[w+1] >>> 24) & 15);
    out[15+(i<<5)] = ((in[w+1] >>> 28) & 15);
    out[16+(i<<5)] = ((in[w+2]) & 15);
    out[17+(i<<5)] = ((in[w+2] >>> 4) & 15);
    out[18+(i<<5)] = ((in[w+2] >>> 8) & 15);
    out[19+(i<<5)] = ((in[w+2] >>> 12) & 15);
    out[20+(i<<5)] = ((in[w+2] >>> 16) & 15);
    out[21+(i<<5)] = ((in[w+2] >>> 20) & 15);
    out[22+(i<<5)] = ((in[w+2] >>> 24) & 15);
    out[23+(i<<5)] = ((in[w+2] >>> 28) & 15);
    out[24+(i<<5)] = ((in[w+3]) & 15);
    out[25+(i<<5)] = ((in[w+3] >>> 4) & 15);
    out[26+(i<<5)] = ((in[w+3] >>> 8) & 15);
    out[27+(i<<5)] = ((in[w+3] >>> 12) & 15);
    out[28+(i<<5)] = ((in[w+3] >>> 16) & 15);
    out[29+(i<<5)] = ((in[w+3] >>> 20) & 15);
    out[30+(i<<5)] = ((in[w+3] >>> 24) & 15);
    out[31+(i<<5)] = ((in[w+3] >>> 28) & 15);
  }
  }
 
  static private void unpack5(int[] out, int[] in)
  {
  int i, w;
  for(i=0, w=2; i<8; ++i, w+=5){
    out[0+(i<<5)] = ((in[w+0]) & 31);
    out[1+(i<<5)] = ((in[w+0] >>> 5) & 31);
    out[2+(i<<5)] = ((in[w+0] >>> 10) & 31);
    out[3+(i<<5)] = ((in[w+0] >>> 15) & 31);
    out[4+(i<<5)] = ((in[w+0] >>> 20) & 31);
    out[5+(i<<5)] = ((in[w+0] >>> 25) & 31);
    out[6+(i<<5)] = ((in[w+0] >>> 30) & 31);
    out[6+(i<<5)] |= ((in[w+1] << 2) & 31);
    out[7+(i<<5)] = ((in[w+1] >>> 3) & 31);
    out[8+(i<<5)] = ((in[w+1] >>> 8) & 31);
    out[9+(i<<5)] = ((in[w+1] >>> 13) & 31);
    out[10+(i<<5)] = ((in[w+1] >>> 18) & 31);
    out[11+(i<<5)] = ((in[w+1] >>> 23) & 31);
    out[12+(i<<5)] = ((in[w+1] >>> 28) & 31);
    out[12+(i<<5)] |= ((in[w+2] << 4) & 31);
    out[13+(i<<5)] = ((in[w+2] >>> 1) & 31);
    out[14+(i<<5)] = ((in[w+2] >>> 6) & 31);
    out[15+(i<<5)] = ((in[w+2] >>> 11) & 31);
    out[16+(i<<5)] = ((in[w+2] >>> 16) & 31);
    out[17+(i<<5)] = ((in[w+2] >>> 21) & 31);
    out[18+(i<<5)] = ((in[w+2] >>> 26) & 31);
    out[19+(i<<5)] = ((in[w+2] >>> 31) & 31);
    out[19+(i<<5)] |= ((in[w+3] << 1) & 31);
    out[20+(i<<5)] = ((in[w+3] >>> 4) & 31);
    out[21+(i<<5)] = ((in[w+3] >>> 9) & 31);
    out[22+(i<<5)] = ((in[w+3] >>> 14) & 31);
    out[23+(i<<5)] = ((in[w+3] >>> 19) & 31);
    out[24+(i<<5)] = ((in[w+3] >>> 24) & 31);
    out[25+(i<<5)] = ((in[w+3] >>> 29) & 31);
    out[25+(i<<5)] |= ((in[w+4] << 3) & 31);
    out[26+(i<<5)] = ((in[w+4] >>> 2) & 31);
    out[27+(i<<5)] = ((in[w+4] >>> 7) & 31);
    out[28+(i<<5)] = ((in[w+4] >>> 12) & 31);
    out[29+(i<<5)] = ((in[w+4] >>> 17) & 31);
    out[30+(i<<5)] = ((in[w+4] >>> 22) & 31);
    out[31+(i<<5)] = ((in[w+4] >>> 27) & 31);
  }
  }
 
  static private void unpack6(int[] out, int[] in)
  {
  int i, w;
  for(i=0, w=2; i<8; ++i, w+=6){
    out[0+(i<<5)] = ((in[w+0]) & 63);
    out[1+(i<<5)] = ((in[w+0] >>> 6) & 63);
    out[2+(i<<5)] = ((in[w+0] >>> 12) & 63);
    out[3+(i<<5)] = ((in[w+0] >>> 18) & 63);
    out[4+(i<<5)] = ((in[w+0] >>> 24) & 63);
    out[5+(i<<5)] = ((in[w+0] >>> 30) & 63);
    out[5+(i<<5)] |= ((in[w+1] << 2) & 63);
    out[6+(i<<5)] = ((in[w+1] >>> 4) & 63);
    out[7+(i<<5)] = ((in[w+1] >>> 10) & 63);
    out[8+(i<<5)] = ((in[w+1] >>> 16) & 63);
    out[9+(i<<5)] = ((in[w+1] >>> 22) & 63);
    out[10+(i<<5)] = ((in[w+1] >>> 28) & 63);
    out[10+(i<<5)] |= ((in[w+2] << 4) & 63);
    out[11+(i<<5)] = ((in[w+2] >>> 2) & 63);
    out[12+(i<<5)] = ((in[w+2] >>> 8) & 63);
    out[13+(i<<5)] = ((in[w+2] >>> 14) & 63);
    out[14+(i<<5)] = ((in[w+2] >>> 20) & 63);
    out[15+(i<<5)] = ((in[w+2] >>> 26) & 63);
    out[16+(i<<5)] = ((in[w+3]) & 63);
    out[17+(i<<5)] = ((in[w+3] >>> 6) & 63);
    out[18+(i<<5)] = ((in[w+3] >>> 12) & 63);
    out[19+(i<<5)] = ((in[w+3] >>> 18) & 63);
    out[20+(i<<5)] = ((in[w+3] >>> 24) & 63);
    out[21+(i<<5)] = ((in[w+3] >>> 30) & 63);
    out[21+(i<<5)] |= ((in[w+4] << 2) & 63);
    out[22+(i<<5)] = ((in[w+4] >>> 4) & 63);
    out[23+(i<<5)] = ((in[w+4] >>> 10) & 63);
    out[24+(i<<5)] = ((in[w+4] >>> 16) & 63);
    out[25+(i<<5)] = ((in[w+4] >>> 22) & 63);
    out[26+(i<<5)] = ((in[w+4] >>> 28) & 63);
    out[26+(i<<5)] |= ((in[w+5] << 4) & 63);
    out[27+(i<<5)] = ((in[w+5] >>> 2) & 63);
    out[28+(i<<5)] = ((in[w+5] >>> 8) & 63);
    out[29+(i<<5)] = ((in[w+5] >>> 14) & 63);
    out[30+(i<<5)] = ((in[w+5] >>> 20) & 63);
    out[31+(i<<5)] = ((in[w+5] >>> 26) & 63);
  }
  }
 
  static private void unpack7(int[] out, int[] in)
  {
  int i, w;
  for(i=0, w=2; i<8; ++i, w+=7){
    out[0+(i<<5)] = ((in[w+0]) & 127);
    out[1+(i<<5)] = ((in[w+0] >>> 7) & 127);
    out[2+(i<<5)] = ((in[w+0] >>> 14) & 127);
    out[3+(i<<5)] = ((in[w+0] >>> 21) & 127);
    out[4+(i<<5)] = ((in[w+0] >>> 28) & 127);
    out[4+(i<<5)] |= ((in[w+1] << 4) & 127);
    out[5+(i<<5)] = ((in[w+1] >>> 3) & 127);
    out[6+(i<<5)] = ((in[w+1] >>> 10) & 127);
    out[7+(i<<5)] = ((in[w+1] >>> 17) & 127);
    out[8+(i<<5)] = ((in[w+1] >>> 24) & 127);
    out[9+(i<<5)] = ((in[w+1] >>> 31) & 127);
    out[9+(i<<5)] |= ((in[w+2] << 1) & 127);
    out[10+(i<<5)] = ((in[w+2] >>> 6) & 127);
    out[11+(i<<5)] = ((in[w+2] >>> 13) & 127);
    out[12+(i<<5)] = ((in[w+2] >>> 20) & 127);
    out[13+(i<<5)] = ((in[w+2] >>> 27) & 127);
    out[13+(i<<5)] |= ((in[w+3] << 5) & 127);
    out[14+(i<<5)] = ((in[w+3] >>> 2) & 127);
    out[15+(i<<5)] = ((in[w+3] >>> 9) & 127);
    out[16+(i<<5)] = ((in[w+3] >>> 16) & 127);
    out[17+(i<<5)] = ((in[w+3] >>> 23) & 127);
    out[18+(i<<5)] = ((in[w+3] >>> 30) & 127);
    out[18+(i<<5)] |= ((in[w+4] << 2) & 127);
    out[19+(i<<5)] = ((in[w+4] >>> 5) & 127);
    out[20+(i<<5)] = ((in[w+4] >>> 12) & 127);
    out[21+(i<<5)] = ((in[w+4] >>> 19) & 127);
    out[22+(i<<5)] = ((in[w+4] >>> 26) & 127);
    out[22+(i<<5)] |= ((in[w+5] << 6) & 127);
    out[23+(i<<5)] = ((in[w+5] >>> 1) & 127);
    out[24+(i<<5)] = ((in[w+5] >>> 8) & 127);
    out[25+(i<<5)] = ((in[w+5] >>> 15) & 127);
    out[26+(i<<5)] = ((in[w+5] >>> 22) & 127);
    out[27+(i<<5)] = ((in[w+5] >>> 29) & 127);
    out[27+(i<<5)] |= ((in[w+6] << 3) & 127);
    out[28+(i<<5)] = ((in[w+6] >>> 4) & 127);
    out[29+(i<<5)] = ((in[w+6] >>> 11) & 127);
    out[30+(i<<5)] = ((in[w+6] >>> 18) & 127);
    out[31+(i<<5)] = ((in[w+6] >>> 25) & 127);
  }
  }
 
  static private void unpack8(int[] out, int[] in)
  {
  int i, w;
  for(i=0, w=2; i<8; ++i, w+=8){
    out[0+(i<<5)] = ((in[w+0]) & 255);
    out[1+(i<<5)] = ((in[w+0] >>> 8) & 255);
    out[2+(i<<5)] = ((in[w+0] >>> 16) & 255);
    out[3+(i<<5)] = ((in[w+0] >>> 24) & 255);
    out[4+(i<<5)] = ((in[w+1]) & 255);
    out[5+(i<<5)] = ((in[w+1] >>> 8) & 255);
    out[6+(i<<5)] = ((in[w+1] >>> 16) & 255);
    out[7+(i<<5)] = ((in[w+1] >>> 24) & 255);
    out[8+(i<<5)] = ((in[w+2]) & 255);
    out[9+(i<<5)] = ((in[w+2] >>> 8) & 255);
    out[10+(i<<5)] = ((in[w+2] >>> 16) & 255);
    out[11+(i<<5)] = ((in[w+2] >>> 24) & 255);
    out[12+(i<<5)] = ((in[w+3]) & 255);
    out[13+(i<<5)] = ((in[w+3] >>> 8) & 255);
    out[14+(i<<5)] = ((in[w+3] >>> 16) & 255);
    out[15+(i<<5)] = ((in[w+3] >>> 24) & 255);
    out[16+(i<<5)] = ((in[w+4]) & 255);
    out[17+(i<<5)] = ((in[w+4] >>> 8) & 255);
    out[18+(i<<5)] = ((in[w+4] >>> 16) & 255);
    out[19+(i<<5)] = ((in[w+4] >>> 24) & 255);
    out[20+(i<<5)] = ((in[w+5]) & 255);
    out[21+(i<<5)] = ((in[w+5] >>> 8) & 255);
    out[22+(i<<5)] = ((in[w+5] >>> 16) & 255);
    out[23+(i<<5)] = ((in[w+5] >>> 24) & 255);
    out[24+(i<<5)] = ((in[w+6]) & 255);
    out[25+(i<<5)] = ((in[w+6] >>> 8) & 255);
    out[26+(i<<5)] = ((in[w+6] >>> 16) & 255);
    out[27+(i<<5)] = ((in[w+6] >>> 24) & 255);
    out[28+(i<<5)] = ((in[w+7]) & 255);
    out[29+(i<<5)] = ((in[w+7] >>> 8) & 255);
    out[30+(i<<5)] = ((in[w+7] >>> 16) & 255);
    out[31+(i<<5)] = ((in[w+7] >>> 24) & 255);
  }
  }
 
  static private void unpack9(int[] out, int[] in)
  {
  int i, w;
  for(i=0, w=2; i<8; ++i, w+=9){
    out[0+(i<<5)] = ((in[w+0]) & 511);
    out[1+(i<<5)] = ((in[w+0] >>> 9) & 511);
    out[2+(i<<5)] = ((in[w+0] >>> 18) & 511);
    out[3+(i<<5)] = ((in[w+0] >>> 27) & 511);
    out[3+(i<<5)] |= ((in[w+1] << 5) & 511);
    out[4+(i<<5)] = ((in[w+1] >>> 4) & 511);
    out[5+(i<<5)] = ((in[w+1] >>> 13) & 511);
    out[6+(i<<5)] = ((in[w+1] >>> 22) & 511);
    out[7+(i<<5)] = ((in[w+1] >>> 31) & 511);
    out[7+(i<<5)] |= ((in[w+2] << 1) & 511);
    out[8+(i<<5)] = ((in[w+2] >>> 8) & 511);
    out[9+(i<<5)] = ((in[w+2] >>> 17) & 511);
    out[10+(i<<5)] = ((in[w+2] >>> 26) & 511);
    out[10+(i<<5)] |= ((in[w+3] << 6) & 511);
    out[11+(i<<5)] = ((in[w+3] >>> 3) & 511);
    out[12+(i<<5)] = ((in[w+3] >>> 12) & 511);
    out[13+(i<<5)] = ((in[w+3] >>> 21) & 511);
    out[14+(i<<5)] = ((in[w+3] >>> 30) & 511);
    out[14+(i<<5)] |= ((in[w+4] << 2) & 511);
    out[15+(i<<5)] = ((in[w+4] >>> 7) & 511);
    out[16+(i<<5)] = ((in[w+4] >>> 16) & 511);
    out[17+(i<<5)] = ((in[w+4] >>> 25) & 511);
    out[17+(i<<5)] |= ((in[w+5] << 7) & 511);
    out[18+(i<<5)] = ((in[w+5] >>> 2) & 511);
    out[19+(i<<5)] = ((in[w+5] >>> 11) & 511);
    out[20+(i<<5)] = ((in[w+5] >>> 20) & 511);
    out[21+(i<<5)] = ((in[w+5] >>> 29) & 511);
    out[21+(i<<5)] |= ((in[w+6] << 3) & 511);
    out[22+(i<<5)] = ((in[w+6] >>> 6) & 511);
    out[23+(i<<5)] = ((in[w+6] >>> 15) & 511);
    out[24+(i<<5)] = ((in[w+6] >>> 24) & 511);
    out[24+(i<<5)] |= ((in[w+7] << 8) & 511);
    out[25+(i<<5)] = ((in[w+7] >>> 1) & 511);
    out[26+(i<<5)] = ((in[w+7] >>> 10) & 511);
    out[27+(i<<5)] = ((in[w+7] >>> 19) & 511);
    out[28+(i<<5)] = ((in[w+7] >>> 28) & 511);
    out[28+(i<<5)] |= ((in[w+8] << 4) & 511);
    out[29+(i<<5)] = ((in[w+8] >>> 5) & 511);
    out[30+(i<<5)] = ((in[w+8] >>> 14) & 511);
    out[31+(i<<5)] = ((in[w+8] >>> 23) & 511);
  }
  }
 
  static private void unpack10(int[] out, int[] in)
  {
  int i, w;
  for(i=0, w=2; i<8; ++i, w+=10){
    out[0+(i<<5)] = ((in[w+0]) & 1023);
    out[1+(i<<5)] = ((in[w+0] >>> 10) & 1023);
    out[2+(i<<5)] = ((in[w+0] >>> 20) & 1023);
    out[3+(i<<5)] = ((in[w+0] >>> 30) & 1023);
    out[3+(i<<5)] |= ((in[w+1] << 2) & 1023);
    out[4+(i<<5)] = ((in[w+1] >>> 8) & 1023);
    out[5+(i<<5)] = ((in[w+1] >>> 18) & 1023);
    out[6+(i<<5)] = ((in[w+1] >>> 28) & 1023);
    out[6+(i<<5)] |= ((in[w+2] << 4) & 1023);
    out[7+(i<<5)] = ((in[w+2] >>> 6) & 1023);
    out[8+(i<<5)] = ((in[w+2] >>> 16) & 1023);
    out[9+(i<<5)] = ((in[w+2] >>> 26) & 1023);
    out[9+(i<<5)] |= ((in[w+3] << 6) & 1023);
    out[10+(i<<5)] = ((in[w+3] >>> 4) & 1023);
    out[11+(i<<5)] = ((in[w+3] >>> 14) & 1023);
    out[12+(i<<5)] = ((in[w+3] >>> 24) & 1023);
    out[12+(i<<5)] |= ((in[w+4] << 8) & 1023);
    out[13+(i<<5)] = ((in[w+4] >>> 2) & 1023);
    out[14+(i<<5)] = ((in[w+4] >>> 12) & 1023);
    out[15+(i<<5)] = ((in[w+4] >>> 22) & 1023);
    out[16+(i<<5)] = ((in[w+5]) & 1023);
    out[17+(i<<5)] = ((in[w+5] >>> 10) & 1023);
    out[18+(i<<5)] = ((in[w+5] >>> 20) & 1023);
    out[19+(i<<5)] = ((in[w+5] >>> 30) & 1023);
    out[19+(i<<5)] |= ((in[w+6] << 2) & 1023);
    out[20+(i<<5)] = ((in[w+6] >>> 8) & 1023);
    out[21+(i<<5)] = ((in[w+6] >>> 18) & 1023);
    out[22+(i<<5)] = ((in[w+6] >>> 28) & 1023);
    out[22+(i<<5)] |= ((in[w+7] << 4) & 1023);
    out[23+(i<<5)] = ((in[w+7] >>> 6) & 1023);
    out[24+(i<<5)] = ((in[w+7] >>> 16) & 1023);
    out[25+(i<<5)] = ((in[w+7] >>> 26) & 1023);
    out[25+(i<<5)] |= ((in[w+8] << 6) & 1023);
    out[26+(i<<5)] = ((in[w+8] >>> 4) & 1023);
    out[27+(i<<5)] = ((in[w+8] >>> 14) & 1023);
    out[28+(i<<5)] = ((in[w+8] >>> 24) & 1023);
    out[28+(i<<5)] |= ((in[w+9] << 8) & 1023);
    out[29+(i<<5)] = ((in[w+9] >>> 2) & 1023);
    out[30+(i<<5)] = ((in[w+9] >>> 12) & 1023);
    out[31+(i<<5)] = ((in[w+9] >>> 22) & 1023);
  }
  }
 
  static private void unpack11(int[] out, int[] in)
  {
  int i, w;
  for(i=0, w=2; i<8; ++i, w+=11){
    out[0+(i<<5)] = ((in[w+0]) & 2047);
    out[1+(i<<5)] = ((in[w+0] >>> 11) & 2047);
    out[2+(i<<5)] = ((in[w+0] >>> 22) & 2047);
    out[2+(i<<5)] |= ((in[w+1] << 10) & 2047);
    out[3+(i<<5)] = ((in[w+1] >>> 1) & 2047);
    out[4+(i<<5)] = ((in[w+1] >>> 12) & 2047);
    out[5+(i<<5)] = ((in[w+1] >>> 23) & 2047);
    out[5+(i<<5)] |= ((in[w+2] << 9) & 2047);
    out[6+(i<<5)] = ((in[w+2] >>> 2) & 2047);
    out[7+(i<<5)] = ((in[w+2] >>> 13) & 2047);
    out[8+(i<<5)] = ((in[w+2] >>> 24) & 2047);
    out[8+(i<<5)] |= ((in[w+3] << 8) & 2047);
    out[9+(i<<5)] = ((in[w+3] >>> 3) & 2047);
    out[10+(i<<5)] = ((in[w+3] >>> 14) & 2047);
    out[11+(i<<5)] = ((in[w+3] >>> 25) & 2047);
    out[11+(i<<5)] |= ((in[w+4] << 7) & 2047);
    out[12+(i<<5)] = ((in[w+4] >>> 4) & 2047);
    out[13+(i<<5)] = ((in[w+4] >>> 15) & 2047);
    out[14+(i<<5)] = ((in[w+4] >>> 26) & 2047);
    out[14+(i<<5)] |= ((in[w+5] << 6) & 2047);
    out[15+(i<<5)] = ((in[w+5] >>> 5) & 2047);
    out[16+(i<<5)] = ((in[w+5] >>> 16) & 2047);
    out[17+(i<<5)] = ((in[w+5] >>> 27) & 2047);
    out[17+(i<<5)] |= ((in[w+6] << 5) & 2047);
    out[18+(i<<5)] = ((in[w+6] >>> 6) & 2047);
    out[19+(i<<5)] = ((in[w+6] >>> 17) & 2047);
    out[20+(i<<5)] = ((in[w+6] >>> 28) & 2047);
    out[20+(i<<5)] |= ((in[w+7] << 4) & 2047);
    out[21+(i<<5)] = ((in[w+7] >>> 7) & 2047);
    out[22+(i<<5)] = ((in[w+7] >>> 18) & 2047);
    out[23+(i<<5)] = ((in[w+7] >>> 29) & 2047);
    out[23+(i<<5)] |= ((in[w+8] << 3) & 2047);
    out[24+(i<<5)] = ((in[w+8] >>> 8) & 2047);
    out[25+(i<<5)] = ((in[w+8] >>> 19) & 2047);
    out[26+(i<<5)] = ((in[w+8] >>> 30) & 2047);
    out[26+(i<<5)] |= ((in[w+9] << 2) & 2047);
    out[27+(i<<5)] = ((in[w+9] >>> 9) & 2047);
    out[28+(i<<5)] = ((in[w+9] >>> 20) & 2047);
    out[29+(i<<5)] = ((in[w+9] >>> 31) & 2047);
    out[29+(i<<5)] |= ((in[w+10] << 1) & 2047);
    out[30+(i<<5)] = ((in[w+10] >>> 10) & 2047);
    out[31+(i<<5)] = ((in[w+10] >>> 21) & 2047);
  }
  }
 
  static private void unpack12(int[] out, int[] in)
  {
  int i, w;
  for(i=0, w=2; i<8; ++i, w+=12){
    out[0+(i<<5)] = ((in[w+0]) & 4095);
    out[1+(i<<5)] = ((in[w+0] >>> 12) & 4095);
    out[2+(i<<5)] = ((in[w+0] >>> 24) & 4095);
    out[2+(i<<5)] |= ((in[w+1] << 8) & 4095);
    out[3+(i<<5)] = ((in[w+1] >>> 4) & 4095);
    out[4+(i<<5)] = ((in[w+1] >>> 16) & 4095);
    out[5+(i<<5)] = ((in[w+1] >>> 28) & 4095);
    out[5+(i<<5)] |= ((in[w+2] << 4) & 4095);
    out[6+(i<<5)] = ((in[w+2] >>> 8) & 4095);
    out[7+(i<<5)] = ((in[w+2] >>> 20) & 4095);
    out[8+(i<<5)] = ((in[w+3]) & 4095);
    out[9+(i<<5)] = ((in[w+3] >>> 12) & 4095);
    out[10+(i<<5)] = ((in[w+3] >>> 24) & 4095);
    out[10+(i<<5)] |= ((in[w+4] << 8) & 4095);
    out[11+(i<<5)] = ((in[w+4] >>> 4) & 4095);
    out[12+(i<<5)] = ((in[w+4] >>> 16) & 4095);
    out[13+(i<<5)] = ((in[w+4] >>> 28) & 4095);
    out[13+(i<<5)] |= ((in[w+5] << 4) & 4095);
    out[14+(i<<5)] = ((in[w+5] >>> 8) & 4095);
    out[15+(i<<5)] = ((in[w+5] >>> 20) & 4095);
    out[16+(i<<5)] = ((in[w+6]) & 4095);
    out[17+(i<<5)] = ((in[w+6] >>> 12) & 4095);
    out[18+(i<<5)] = ((in[w+6] >>> 24) & 4095);
    out[18+(i<<5)] |= ((in[w+7] << 8) & 4095);
    out[19+(i<<5)] = ((in[w+7] >>> 4) & 4095);
    out[20+(i<<5)] = ((in[w+7] >>> 16) & 4095);
    out[21+(i<<5)] = ((in[w+7] >>> 28) & 4095);
    out[21+(i<<5)] |= ((in[w+8] << 4) & 4095);
    out[22+(i<<5)] = ((in[w+8] >>> 8) & 4095);
    out[23+(i<<5)] = ((in[w+8] >>> 20) & 4095);
    out[24+(i<<5)] = ((in[w+9]) & 4095);
    out[25+(i<<5)] = ((in[w+9] >>> 12) & 4095);
    out[26+(i<<5)] = ((in[w+9] >>> 24) & 4095);
    out[26+(i<<5)] |= ((in[w+10] << 8) & 4095);
    out[27+(i<<5)] = ((in[w+10] >>> 4) & 4095);
    out[28+(i<<5)] = ((in[w+10] >>> 16) & 4095);
    out[29+(i<<5)] = ((in[w+10] >>> 28) & 4095);
    out[29+(i<<5)] |= ((in[w+11] << 4) & 4095);
    out[30+(i<<5)] = ((in[w+11] >>> 8) & 4095);
    out[31+(i<<5)] = ((in[w+11] >>> 20) & 4095);
  }
  }
 
  static private void unpack13(int[] out, int[] in)
  {
  int i, w;
  for(i=0, w=2; i<8; ++i, w+=13){
    out[0+(i<<5)] = ((in[w+0]) & 8191);
    out[1+(i<<5)] = ((in[w+0] >>> 13) & 8191);
    out[2+(i<<5)] = ((in[w+0] >>> 26) & 8191);
    out[2+(i<<5)] |= ((in[w+1] << 6) & 8191);
    out[3+(i<<5)] = ((in[w+1] >>> 7) & 8191);
    out[4+(i<<5)] = ((in[w+1] >>> 20) & 8191);
    out[4+(i<<5)] |= ((in[w+2] << 12) & 8191);
    out[5+(i<<5)] = ((in[w+2] >>> 1) & 8191);
    out[6+(i<<5)] = ((in[w+2] >>> 14) & 8191);
    out[7+(i<<5)] = ((in[w+2] >>> 27) & 8191);
    out[7+(i<<5)] |= ((in[w+3] << 5) & 8191);
    out[8+(i<<5)] = ((in[w+3] >>> 8) & 8191);
    out[9+(i<<5)] = ((in[w+3] >>> 21) & 8191);
    out[9+(i<<5)] |= ((in[w+4] << 11) & 8191);
    out[10+(i<<5)] = ((in[w+4] >>> 2) & 8191);
    out[11+(i<<5)] = ((in[w+4] >>> 15) & 8191);
    out[12+(i<<5)] = ((in[w+4] >>> 28) & 8191);
    out[12+(i<<5)] |= ((in[w+5] << 4) & 8191);
    out[13+(i<<5)] = ((in[w+5] >>> 9) & 8191);
    out[14+(i<<5)] = ((in[w+5] >>> 22) & 8191);
    out[14+(i<<5)] |= ((in[w+6] << 10) & 8191);
    out[15+(i<<5)] = ((in[w+6] >>> 3) & 8191);
    out[16+(i<<5)] = ((in[w+6] >>> 16) & 8191);
    out[17+(i<<5)] = ((in[w+6] >>> 29) & 8191);
    out[17+(i<<5)] |= ((in[w+7] << 3) & 8191);
    out[18+(i<<5)] = ((in[w+7] >>> 10) & 8191);
    out[19+(i<<5)] = ((in[w+7] >>> 23) & 8191);
    out[19+(i<<5)] |= ((in[w+8] << 9) & 8191);
    out[20+(i<<5)] = ((in[w+8] >>> 4) & 8191);
    out[21+(i<<5)] = ((in[w+8] >>> 17) & 8191);
    out[22+(i<<5)] = ((in[w+8] >>> 30) & 8191);
    out[22+(i<<5)] |= ((in[w+9] << 2) & 8191);
    out[23+(i<<5)] = ((in[w+9] >>> 11) & 8191);
    out[24+(i<<5)] = ((in[w+9] >>> 24) & 8191);
    out[24+(i<<5)] |= ((in[w+10] << 8) & 8191);
    out[25+(i<<5)] = ((in[w+10] >>> 5) & 8191);
    out[26+(i<<5)] = ((in[w+10] >>> 18) & 8191);
    out[27+(i<<5)] = ((in[w+10] >>> 31) & 8191);
    out[27+(i<<5)] |= ((in[w+11] << 1) & 8191);
    out[28+(i<<5)] = ((in[w+11] >>> 12) & 8191);
    out[29+(i<<5)] = ((in[w+11] >>> 25) & 8191);
    out[29+(i<<5)] |= ((in[w+12] << 7) & 8191);
    out[30+(i<<5)] = ((in[w+12] >>> 6) & 8191);
    out[31+(i<<5)] = ((in[w+12] >>> 19) & 8191);
  }
  }
 
  static private void unpack16(int[] out, int[] in)
  {
  int i, w;
  for(i=0, w=2; i<8; ++i, w+=16){
    out[0+(i<<5)] = ((in[w+0]) & 65535);
    out[1+(i<<5)] = ((in[w+0] >>> 16) & 65535);
    out[2+(i<<5)] = ((in[w+1]) & 65535);
    out[3+(i<<5)] = ((in[w+1] >>> 16) & 65535);
    out[4+(i<<5)] = ((in[w+2]) & 65535);
    out[5+(i<<5)] = ((in[w+2] >>> 16) & 65535);
    out[6+(i<<5)] = ((in[w+3]) & 65535);
    out[7+(i<<5)] = ((in[w+3] >>> 16) & 65535);
    out[8+(i<<5)] = ((in[w+4]) & 65535);
    out[9+(i<<5)] = ((in[w+4] >>> 16) & 65535);
    out[10+(i<<5)] = ((in[w+5]) & 65535);
    out[11+(i<<5)] = ((in[w+5] >>> 16) & 65535);
    out[12+(i<<5)] = ((in[w+6]) & 65535);
    out[13+(i<<5)] = ((in[w+6] >>> 16) & 65535);
    out[14+(i<<5)] = ((in[w+7]) & 65535);
    out[15+(i<<5)] = ((in[w+7] >>> 16) & 65535);
    out[16+(i<<5)] = ((in[w+8]) & 65535);
    out[17+(i<<5)] = ((in[w+8] >>> 16) & 65535);
    out[18+(i<<5)] = ((in[w+9]) & 65535);
    out[19+(i<<5)] = ((in[w+9] >>> 16) & 65535);
    out[20+(i<<5)] = ((in[w+10]) & 65535);
    out[21+(i<<5)] = ((in[w+10] >>> 16) & 65535);
    out[22+(i<<5)] = ((in[w+11]) & 65535);
    out[23+(i<<5)] = ((in[w+11] >>> 16) & 65535);
    out[24+(i<<5)] = ((in[w+12]) & 65535);
    out[25+(i<<5)] = ((in[w+12] >>> 16) & 65535);
    out[26+(i<<5)] = ((in[w+13]) & 65535);
    out[27+(i<<5)] = ((in[w+13] >>> 16) & 65535);
    out[28+(i<<5)] = ((in[w+14]) & 65535);
    out[29+(i<<5)] = ((in[w+14] >>> 16) & 65535);
    out[30+(i<<5)] = ((in[w+15]) & 65535);
    out[31+(i<<5)] = ((in[w+15] >>> 16) & 65535);
  }
  }
 
  static private void unpack20(int[] out, int[] in)
  {
  int i, w;
  for(i=0, w=2; i<8; ++i, w+=20){
    out[0+(i<<5)] = ((in[w+0]) & 1048575);
    out[1+(i<<5)] = ((in[w+0] >>> 20) & 1048575);
    out[1+(i<<5)] |= ((in[w+1] << 12) & 1048575);
    out[2+(i<<5)] = ((in[w+1] >>> 8) & 1048575);
    out[3+(i<<5)] = ((in[w+1] >>> 28) & 1048575);
    out[3+(i<<5)] |= ((in[w+2] << 4) & 1048575);
    out[4+(i<<5)] = ((in[w+2] >>> 16) & 1048575);
    out[4+(i<<5)] |= ((in[w+3] << 16) & 1048575);
    out[5+(i<<5)] = ((in[w+3] >>> 4) & 1048575);
    out[6+(i<<5)] = ((in[w+3] >>> 24) & 1048575);
    out[6+(i<<5)] |= ((in[w+4] << 8) & 1048575);
    out[7+(i<<5)] = ((in[w+4] >>> 12) & 1048575);
    out[8+(i<<5)] = ((in[w+5]) & 1048575);
    out[9+(i<<5)] = ((in[w+5] >>> 20) & 1048575);
    out[9+(i<<5)] |= ((in[w+6] << 12) & 1048575);
    out[10+(i<<5)] = ((in[w+6] >>> 8) & 1048575);
    out[11+(i<<5)] = ((in[w+6] >>> 28) & 1048575);
    out[11+(i<<5)] |= ((in[w+7] << 4) & 1048575);
    out[12+(i<<5)] = ((in[w+7] >>> 16) & 1048575);
    out[12+(i<<5)] |= ((in[w+8] << 16) & 1048575);
    out[13+(i<<5)] = ((in[w+8] >>> 4) & 1048575);
    out[14+(i<<5)] = ((in[w+8] >>> 24) & 1048575);
    out[14+(i<<5)] |= ((in[w+9] << 8) & 1048575);
    out[15+(i<<5)] = ((in[w+9] >>> 12) & 1048575);
    out[16+(i<<5)] = ((in[w+10]) & 1048575);
    out[17+(i<<5)] = ((in[w+10] >>> 20) & 1048575);
    out[17+(i<<5)] |= ((in[w+11] << 12) & 1048575);
    out[18+(i<<5)] = ((in[w+11] >>> 8) & 1048575);
    out[19+(i<<5)] = ((in[w+11] >>> 28) & 1048575);
    out[19+(i<<5)] |= ((in[w+12] << 4) & 1048575);
    out[20+(i<<5)] = ((in[w+12] >>> 16) & 1048575);
    out[20+(i<<5)] |= ((in[w+13] << 16) & 1048575);
    out[21+(i<<5)] = ((in[w+13] >>> 4) & 1048575);
    out[22+(i<<5)] = ((in[w+13] >>> 24) & 1048575);
    out[22+(i<<5)] |= ((in[w+14] << 8) & 1048575);
    out[23+(i<<5)] = ((in[w+14] >>> 12) & 1048575);
    out[24+(i<<5)] = ((in[w+15]) & 1048575);
    out[25+(i<<5)] = ((in[w+15] >>> 20) & 1048575);
    out[25+(i<<5)] |= ((in[w+16] << 12) & 1048575);
    out[26+(i<<5)] = ((in[w+16] >>> 8) & 1048575);
    out[27+(i<<5)] = ((in[w+16] >>> 28) & 1048575);
    out[27+(i<<5)] |= ((in[w+17] << 4) & 1048575);
    out[28+(i<<5)] = ((in[w+17] >>> 16) & 1048575);
    out[28+(i<<5)] |= ((in[w+18] << 16) & 1048575);
    out[29+(i<<5)] = ((in[w+18] >>> 4) & 1048575);
    out[30+(i<<5)] = ((in[w+18] >>> 24) & 1048575);
    out[30+(i<<5)] |= ((in[w+19] << 8) & 1048575);
    out[31+(i<<5)] = ((in[w+19] >>> 12) & 1048575);
  }
  }
}
